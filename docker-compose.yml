networks:
  app-network:
    driver: bridge

services:
  postgre:
    image: postgres:latest
    container_name: postgre
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
    volumes:
      - postgre_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 10

  auth-service:  
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    container_name: auth-service
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__PostgresConnection=Host=postgre;Port=5432;Database=mydb;Username=myuser;Password=mypassword
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
    depends_on:
      - postgre
      - rabbitmq
    restart: always
    networks:
      - app-network  

  order-service:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    container_name: order-service
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__PostgresConnection=Host=postgre;Port=5432;Database=mydb;Username=myuser;Password=mypassword
      - AuthService__BaseUrl=http://auth-service:8080  
      - MongoDB__ConnectionString=mongodb://mongo:27017
      - MongoDB__DatabaseName=warehouse_db
      - Redis__ConnectionString=redis:6379  
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
    depends_on:
      - postgre
      - auth-service
      - mongo
      - redis
      - rabbitmq
    restart: always
    networks:
      - app-network  

  manager-app:  
    build:
      context: .
      dockerfile: ManagerApp/Dockerfile
    container_name: manager-app
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - AuthService__BaseUrl=http://auth-service:8080  
      - OrderService__BaseUrl=http://order-service:8080  
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
    depends_on:
      - auth-service
      - order-service
    restart: always
    networks:
      - app-network  
    volumes:
      - data_protection:/var/data-protection  

  btu-calc-service:
    build:
      context: .
      dockerfile: BTUCalcService/Dockerfile
    container_name: btu-calc-service
    ports:
      - "8085:8000"
    environment:
      - MONGO_URL=mongodb://mongo:27017
    depends_on:
      - mongo
    restart: always
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    networks:
      - app-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    command: redis-server --appendonly yes --save 60 100
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network

volumes:
  postgre_data:
  data_protection:
  mongo_data:
  redis_data: