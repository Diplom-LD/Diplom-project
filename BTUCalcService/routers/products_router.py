from fastapi import APIRouter, HTTPException, Query
from services.db import get_mongo_client
import logging

router = APIRouter(prefix="/BTUCalcService/products", tags=["Products"])

db = get_mongo_client()

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
def parse_btu(value):
    try:
        return int(value)
    except (ValueError, TypeError):
        return value  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

@router.get("/range/")
async def get_products_by_btu_range(
    btu_min: int = Query(..., description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BTU"),
    btu_max: int = Query(..., description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BTU"),
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É BTU –∏–∑ –æ–±—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
    btu_min = parse_btu(btu_min)
    btu_max = parse_btu(btu_max)

    if isinstance(btu_min, int) and isinstance(btu_max, int) and btu_min > btu_max:
        raise HTTPException(
            status_code=400,
            detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BTU –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ",
        )

    collection = db["all_products"]

    products = list(
        collection.find(
            {"btu": {"$gte": btu_min, "$lte": btu_max, "$ne": None}},
            {"_id": 0},
        )
    )

    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return products

@router.get("/btu/{btu}")
async def get_products_by_exact_btu(btu: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É BTU –∏–∑ –æ–±—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
    btu = parse_btu(btu)

    collection = db["all_products"]

    products = list(
        collection.find(
            {"btu": btu},
            {"_id": 0},
        )
    )

    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return products

@router.get("/extremes/")
async def get_extreme_btu_products():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º BTU."""
    collection = db["all_products"]

    extreme_values = collection.aggregate([
        {
            "$project": {
                "btu": {
                    "$toInt": {
                        "$arrayElemAt": [
                            {"$split": [{"$toString": "$btu"}, " "]},
                            0
                        ]
                    }
                },
                "name": 1, "price": 1, "currency": 1, "service_area": 1,
                "store": 1, "url": 1
            }
        },
        {
            "$group": {
                "_id": None,
                "min_btu": {"$min": "$btu"},
                "max_btu": {"$max": "$btu"}
            }
        }
    ])

    extremes = next(extreme_values, None)
    if not extremes or extremes["min_btu"] is None or extremes["max_btu"] is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã BTU")
        raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã BTU")

    btu_min = extremes["min_btu"]
    btu_max = extremes["max_btu"]

    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω BTU: min={btu_min}, max={btu_max}")

    products = list(collection.aggregate([
        {
            "$project": {
                "btu": {
                    "$toInt": {
                        "$arrayElemAt": [
                            {"$split": [{"$toString": "$btu"}, " "]},
                            0
                        ]
                    }
                },
                "name": 1, "price": 1, "currency": 1, "service_area": 1,
                "store": 1, "url": 1
            }
        },
        {"$match": {"btu": {"$in": [btu_min, btu_max]}}}
    ]))

    if not products:
        logger.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –∫—Ä–∞–π–Ω–∏–º–∏ BTU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã —Å –∫—Ä–∞–π–Ω–∏–º–∏ BTU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—Ä–∞–π–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ BTU")
    for product in products:
        logger.info(f"üìå {product}")

    return {
        "btu_min": btu_min,
        "btu_max": btu_max,
        "products": products
    }


@router.get("/stores/")
async def get_stores():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞–º–∏."""
    stores = db.list_collection_names()
    stores = [store.replace("_products", "") for store in stores if store.endswith("_products")]
    
    if not stores:
        raise HTTPException(status_code=404, detail="–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return {"stores": stores}

@router.get("/store/{store_name}")
async def get_products_by_store(store_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    collection_name = f"{store_name.lower()}_products"
    if collection_name not in db.list_collection_names():
        raise HTTPException(status_code=404, detail=f"–ú–∞–≥–∞–∑–∏–Ω {store_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    products = list(
        db[collection_name].find(
            {"_id": {"$ne": "metadata"}},
            {"_id": 0},
        )
    )

    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return products


@router.get("/service_area/{area}")
async def get_products_by_service_area(area: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ —Ç–æ—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±5 –º¬≤."""
    collection = db["all_products"]
    
    # –ò—â–µ–º –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±5 –º¬≤
    products = list(
        collection.find(
            {"service_area": {"$gte": area - 5, "$lte": area + 5}},  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            {"_id": 0},
        )
    )
    
    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return products

@router.get("/price/{price}")
async def get_products_by_exact_price(price: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–Ω–µ."""
    collection = db["all_products"]
    
    products = list(
        collection.find(
            {"price": price},
            {"_id": 0},
        )
    )
    
    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return products

@router.get("/price/")
async def get_products_by_price_range(
    price_min: int = Query(..., description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    price_max: int = Query(..., description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω."""
    if price_min > price_max:
        raise HTTPException(status_code=400, detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π")
    
    collection = db["all_products"]
    
    products = list(
        collection.find(
            {"price": {"$gte": price_min, "$lte": price_max}},
            {"_id": 0},
        )
    )
    
    if not products:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return products