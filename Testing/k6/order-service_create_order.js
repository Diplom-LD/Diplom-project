import http from 'k6/http';
import { sleep, check } from 'k6';

export let options = {
    vus: 50,
    duration: '2m',
};

const AUTH_URL = 'http://auth-service:8080';
const ORDER_URL = 'http://order-service:8080';

export default function () {
    // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const loginPayload = JSON.stringify({
        identifier: 'manager1',
        password: 'Test@123'
    });

    const loginRes = http.post(`${AUTH_URL}/auth/sign-in`, loginPayload, {
        headers: { 'Content-Type': 'application/json' },
    });

    check(loginRes, {
        'üîê –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω (200)': (res) => res.status === 200,
        'üîê accessToken –ø–æ–ª—É—á–µ–Ω': (res) => res.json('accessToken') !== undefined,
    });

    const token = loginRes.json('accessToken');
    const authHeaders = {
        headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
        },
    };

    sleep(0.3);

    // üÜï –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    const createPayload = JSON.stringify({
        OrderType: "Installation",
        InstallationDate: "2025-03-28T10:00:00Z",
        InstallationAddress: "37, —É–ª–∏—Ü–∞ –°—Ñ–∞—Ç—É–ª –¶—ç—Ä–∏–π",
        Notes: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞",
        Equipment: {
            ModelName: "LG Standard Plus",
            ModelSource: "Warehouse",
            BTU: 25882,
            ServiceArea: 32,
            Price: 92818,
            Quantity: 1
        },
        FullName: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        PhoneNumber: "+37360000000",
        Email: "ivan.petrov@test.com",
        FulfillmentStatus: "New",
        PaymentStatus: "UnPaid",
        PaymentMethod: "Mastercard",
        WorkCost: 500.00,
        ManagerId: "019625fc-8fac-7fce-8414-184af3dcc90a"
    });

    const createRes = http.post(`${ORDER_URL}/manager/orders/create`, createPayload, authHeaders);
    check(createRes, {
        'üÜï –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (200)': (res) => res.status === 200,
    });

    sleep(0.5);

    // üì• –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    const allOrdersRes = http.get(`${ORDER_URL}/manager/orders/get/all`, authHeaders);
    check(allOrdersRes, {
        'üì• –í—Å–µ –∑–∞—è–≤–∫–∏ (200)': (res) => res.status === 200,
    });

    let orders = [];
    try {
        orders = allOrdersRes.json();
    } catch (e) {}

    sleep(0.3);

    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (orders.length > 0) {
        const randomOrder = orders[Math.floor(Math.random() * orders.length)];
        const orderId = randomOrder.id || randomOrder.orderId || randomOrder.Id;

        const orderRes = http.get(`${ORDER_URL}/manager/orders/get/${orderId}`, authHeaders);
        check(orderRes, {
            'üîé –ó–∞—è–≤–∫–∞ –ø–æ ID (200)': (res) => res.status === 200,
        });
    }

    // üí§ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
    sleep(1);
}
