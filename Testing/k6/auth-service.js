import http from 'k6/http';
import { sleep, check } from 'k6';

export let options = {
    vus: 50,              // –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    duration: '2m',       // 2 –º–∏–Ω—É—Ç—ã
};

const BASE_URL = 'http://auth-service:8080';

export default function () {
    const loginPayload = JSON.stringify({
        identifier: 'manager1',
        password: 'Test@123'
    });

    const loginHeaders = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const loginRes = http.post(`${BASE_URL}/auth/sign-in`, loginPayload, loginHeaders);

    check(loginRes, {
        '–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω (200)': (res) => res.status === 200,
        'accessToken –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç': (res) => res.json('accessToken') !== undefined,
    });

    const token = loginRes.json('accessToken');

    const authHeaders = {
        headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    };

    sleep(0.2);

    // üîÅ –ü–æ–≤—Ç–æ—Ä–∏–º –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞
    for (let i = 0; i < 5; i++) {
        // –ü—Ä–æ—Ñ–∏–ª—å
        const profileRes = http.get(`${BASE_URL}/auth/account/my-profile`, authHeaders);
        check(profileRes, {
            [`${i + 1}. –ü—Ä–æ—Ñ–∏–ª—å (200)`]: (res) => res.status === 200,
        });

        sleep(0.2);

        // –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞
        const unauthRes = http.get(`${BASE_URL}/auth/account/my-profile`);
        check(unauthRes, {
            [`${i + 1}. –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–∫–∞–∑ (401)`]: (res) => res.status === 401,
        });

        sleep(0.2);

        // –ö–ª–∏–µ–Ω—Ç—ã
        const clientsRes = http.get(`${BASE_URL}/auth/account/get-all-clients`, authHeaders);
        check(clientsRes, {
            [`${i + 1}. –ö–ª–∏–µ–Ω—Ç—ã (200)`]: (res) => res.status === 200,
        });

        sleep(0.2);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
        const getClientRes = http.get(`${BASE_URL}/auth/account/get-profile/client1`, authHeaders);
        check(getClientRes, {
            [`${i + 1}. –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞`]: (res) => res.status === 200 || res.status === 404,
        });

        sleep(0.2);
    }
}
